<Project TreatAsLocalProperty="_NuGetPackageExtension;_SymbolsNuGetPackageExtension;_PackageOutputPathWildcard;_SymbolsPackageOutputPathWildcard">

    <PropertyGroup>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <RootNamespace>Xwellbehaved</RootNamespace>
    </PropertyGroup>

    <PropertyGroup>
        <XunitVersion>2.8.1</XunitVersion>
        <XunitExtensibilityCorePackage>xunit.extensibility.core</XunitExtensibilityCorePackage>
        <XunitExtensibilityVersion>2.8.1</XunitExtensibilityVersion>
        <XwellbehavedCorePackageId>Xwellbehaved.Core</XwellbehavedCorePackageId>
        <PackageProjectUrl>https://github.com/mwpowellhtx/xwellbehaved.net</PackageProjectUrl>
        <Product>xWellBehaved.net</Product>
        <ProductName>xWellBehaved.net</ProductName>
    </PropertyGroup>

    <ItemGroup>
        <None Remove="*.TMP" />
        <None Remove="**\*.TMP" />
    </ItemGroup>

    <!-- Versioning... -->
    <PropertyGroup>
        <BumpAssemblyVersionsVersion>1.9.1</BumpAssemblyVersionsVersion>
        <!-- Provider specified in Release configuration only.  -->
        <BumpAssemblyVersionBuildProvider Condition="'$(Configuration)' == 'Release'">MinutesSinceMidnight</BumpAssemblyVersionBuildProvider>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="BumpAssemblyVersions" Version="$(BumpAssemblyVersionsVersion)" PrivateAssets="All">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <!-- ReSharper disable UnknownProperty -->
    <ItemGroup Condition="'$(TargetFramework)' != '' And '$(Configuration)' == 'Debug'">
        <BumpVersionSpec Include="Version" BuildProviderTemplate="Increment" />
        <BumpVersionSpec Include="AssemblyVersion" BuildProviderTemplate="Increment" />
        <BumpVersionSpec Include="FileVersion" BuildProviderTemplate="Increment" />
        <BumpVersionSpec Include="PackageVersion" BuildProviderTemplate="Increment" />
    </ItemGroup>

    <!-- Internally, our BumpAssemblyVersions protocol is switched according to the following
        keywords:

        init: initiates versioning
        patch: adjusts patch versioning only
        minor: adjusts from minor.patch versioning
        major: adjusts from major.minor.patch versioning

        We also trigger based on Configuration, Debug and Release modes.

        In addition to which, for best coodrination, we also trigger based upon TargetFramework
        being single-targeted.

        UTC is assumed during Release mode builds; additionally, we allow for element resetting
        during overflow or runoff situations.

        One last observation, initially, we thought perhaps we needed to be very hands on
        with internal project/package reference versions. However, after a bit of testing,
        verification, and validation, it seems as though, not only is the NuGet package
        versioning on target, but we are also observing a very aligned versioning output.
        So, we think we can run very hands off, not have to regulate any NuGet properties,
        and it is a Win-Win-Win.
        -->
    <ItemGroup Condition="'$(TargetFramework)' != '' And '$(Configuration)' == 'Release' And '$(BumpSpecSwitch)' == 'init'">
        <BumpVersionSpec Include="Version" UseUtc="true" MayReset="true" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="AssemblyVersion" UseUtc="true" MayReset="true" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="FileVersion" UseUtc="true" MayReset="true" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="PackageVersion" UseUtc="true" MayReset="true" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' != '' And '$(Configuration)' == 'Release' And '$(BumpSpecSwitch)' == 'patch'">
        <BumpVersionSpec Include="Version" UseUtc="true" MayReset="true" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="AssemblyVersion" UseUtc="true" MayReset="true" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="FileVersion" UseUtc="true" MayReset="true" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="PackageVersion" UseUtc="true" MayReset="true" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' != '' And '$(Configuration)' == 'Release' And '$(BumpSpecSwitch)' == 'minor'">
        <BumpVersionSpec Include="Version" UseUtc="true" MayReset="true" MinorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="AssemblyVersion" UseUtc="true" MayReset="true" MinorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="FileVersion" UseUtc="true" MayReset="true" MinorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="PackageVersion" UseUtc="true" MayReset="true" MinorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' != '' And '$(Configuration)' == 'Release' And '$(BumpSpecSwitch)' == 'major'">
        <BumpVersionSpec Include="Version" UseUtc="true" MayReset="true" MajorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="AssemblyVersion" UseUtc="true" MayReset="true" MajorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="FileVersion" UseUtc="true" MayReset="true" MajorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
        <BumpVersionSpec Include="PackageVersion" UseUtc="true" MayReset="true" MajorProviderTemplate="Increment" PatchProviderTemplate="Increment" BuildProviderTemplate="$(BumpAssemblyVersionBuildProvider)" />
    </ItemGroup>

    <!-- TODO: this one could probably see its own dedicated 'targets' file... -->
    <Target Name="DeleteOutputPackagesBeforeBuild" BeforeTargets="Clean;PreBuildEvent">

        <PropertyGroup>
            <_NuGetPackageExtension>.nupkg</_NuGetPackageExtension>
            <_PackageOutputPathWildcard>$(PackageOutputPath)$(PackageId).*$(_NuGetPackageExtension)</_PackageOutputPathWildcard>
        </PropertyGroup>

        <!-- Remember to include the Symbols packages during the cleanup process. -->
        <PropertyGroup>
            <_SymbolsNuGetPackageExtension>.snupkg</_SymbolsNuGetPackageExtension>
            <_SymbolsPackageOutputPathWildcard>$(PackageOutputPath)$(PackageId).*$(_SymbolsNuGetPackageExtension)</_SymbolsPackageOutputPathWildcard>
        </PropertyGroup>

        <ItemGroup>
            <PackagePathsToDelete Include="$(_PackageOutputPathWildcard)" />
            <PackagePathsToDelete Include="$(_SymbolsPackageOutputPathWildcard)" />
        </ItemGroup>

        <Message Importance="high" Text="Deleting packages '%(PackagePathsToDelete.Identity)' ..." Condition="@(PackagePathsToDelete->Count()) > 0" />

        <!-- Not sure why <Delete /> task was not working here. -->
        <Exec Command="if exist &quot;$(_PackageOutputPathWildcard)&quot; del /f &quot;$(_PackageOutputPathWildcard)&quot;" />

    </Target>

</Project>
